<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <script src="https://cdnjs.cloudflare.com/ajax/libs/three.js/r127/three.min.js"></script>
    <title>markerlessAR</title>
</head>
<body>
    
</body>
<script type="module">
    const canvas = document.createElement("canvas");
    canvas.width = document.documentElement.clientWidth;
    canvas.height = document.documentElement.clientHeight;

    document.body.appendChild(canvas);
    const gl = canvas.getContext("webgl",{xrCompatible:true});
    const scene = new THREE.Scene();

    const camera = new THREE.PerspectiveCamera();
    camera.matrixAutoUpdate = false;

    const session = await navigator.xr.requestSession("immersive-ar");
    session.updateRenderState({
        baseLayer: new XRWebGLLayer(session,gl)
    });

    const referenceSpace = await session.requestReferenceSpace("local");
    const viewerSpace = await session.requestReferenceSpace("viewer");
    const hitTestSource = await session.requestGitTestSource({space: viewerSpace});

    const loader = new THREE.GLTFLoader();
    

    let root;
    loader.load("scene.gltf",(gltf)=>{        
        root = gltf.scene;
        root.scale.set(0.4,0.4,0.4);
    });

    let reticle;

    loader.load("https://immersive-web.github.io/webxr-samples/media/gltf/reticle/reticle.gltf",(gltf)=>{
        reticle = gltf.scene;
        reticle.visible = false;
        scene.add(reticle);
    });

    const renderer = new THREE.WebGLRenderer({
        alpha: true,
        preserveDrawingBuffer: true,
        canvas: canvas,
        context: gl
    });
    renderer.autoClear = false;
    
    session.requestAnimationFrame(onXRFrame);

    gl.bindFramebuffer(gl.FRAMEBUFFER,session.renderState.baseLayer.framebuffer);

    const pose = frame.getViewerPose(referenceSpace);

    if(pose) {
        const view = pose.views[0];

        const viewport = session.renderState.baseLayer.getViewport(view);
        render.setSize(viewport.width,viewport.height);

        camera.matrix.fromArray(view.transform.matrix);
        camera.projectionMatrix.fromArray(view.projectionMatrix);
        camera.updateMatrixWorld(true);

        const hitTestResults = frame.getHitTestResults(hitTestSource);
        if(hitTestResults.length > 0){
            const hitPose = hitTestResults[0].getPose(referenceSpace);
            reticle.visible = true;
            reticle.position.set(hitPose.transform.position.x,hitPose.transform.position.y,hitPose.transform.position.z);
            reticle.updateMatrixWorld(true);
        }
    }
</script>
</html>